#include "busybox.hpp"
#include <iostream>
#include <iomanip>
#include "tfield_io.hpp"
#include "lib-png.hpp"
#include "lib-zlib.hpp"
#include "newdisplay.hpp"
#include "filepath.hpp"
#include "cacheromfs.hpp"
//void    dump(bytevector&  dst, const stringmap& src);
//void    dump(stringmap&   dst, const bytevector& src);

//  int deflate(std::vector<unsigned char>& dst,const std::vector<unsigned char>& src,bool gzip);
//  int inflate(std::vector<unsigned char>& dst,const std::vector<unsigned char>& src,bool gzip);

// image32 image32::resize_nn(const unsigned int& x,const unsigned int& y)

namespace rcl{
rcl::image32 plot_vf_file(const std::string& filename);
}

int vf_render_main(int argc,char **argv){
  if (argc==1){
  std::cout << argv[0] << " file.vf file.png <size=128>" << std::endl;
  return 1;
  }

  std::string infile,outfile,size;
  int nsize;
  if (argc>1)  infile=std::string(argv[1]);
  if (argc>2)  outfile=std::string(argv[2]);
  if (argc>3)  size=std::string(argv[3]);
  if (argc>3)  std::stringstream(size) >> nsize;
  if (nsize==0) nsize = 128;
  //bool is_cache = rcl::check_file(".thumbs.vfc");
  rcl::icacheromfs cache;
  rcl::FilePath fp(infile);
  if (rcl::is_crfs(fp.GetPath()+".thumbs.vfc")) cache.open_file(fp.GetPath()+".thumbs.vfc");
  //rcl::stringvector list = cache.get_filenames();
  //std::cout << "Found " << list.size() << " items: ";
  //for (int idx=0;idx<list.size();idx++) std::cout << list[idx] <<" ";
  //std::cout << std::endl<< "=========================================================="<< std::endl; 
  std::stringstream ss;
  ss << fp.GetFile() << "_" << nsize << ".png";
  std::vector<unsigned char> iofile;
  //std::cout << "Check " << ss.str() << std::endl;
  if (cache.check_key(ss.str())){
    //std::cout << ss.str() << " was found" << std::endl;
    cache.read(iofile,ss.str());
  }
  else{
    //std::cout << ss.str() << " was not found" << std::endl;
    rcl::image32 render = rcl::plot_vf_file(infile);
    rcl::upair isize,osize;
    isize.x() = render.GetX();
    isize.y() = render.GetY();
    
    if (isize.x()<isize.y()){
      osize.y()=nsize;
      osize.x()=nsize*isize.x();
      osize.x()=osize.x()/isize.y();
      }
    else{
      osize.x()=nsize;
      osize.y()=nsize*isize.y();
      osize.y()=osize.y()/isize.x();
      }
    rcl::encode_png(iofile,render.resize_nn(osize.x(),osize.y()));
  }
  rcl::save_file(outfile,iofile);
  return 0;
}
static rcl::reg_app reg1("vf_render",vf_render_main);

int populate_cache_main(int argc,char **argv){
  std::vector<std::string> args(argv,argv+argc);
  if (argc<3){
    std::cout << argv[0] << " <size> file1.vf file2.vf ... file_n.vf" << std::endl;
    return 1;
    }
  rcl::ocacheromfs_mem cache;
  if (rcl::is_crfs(".thumbs.vfc")) {
    std::cout << ".thumbs.vfc existe. Leer en memoria" << std::endl;
    cache.populate_from_file(".thumbs.vfc"); 
  }
  int size=0;
  std::cout << "Tamaño elegido: " << argv[1] << std::endl;
  std::stringstream(argv[1]) >> size;
  if (size==0) size = 128;
  for (int idx=2;idx<args.size();idx++){
    rcl::FilePath fp(args[idx]);
    rcl::image32 render = rcl::plot_vf_file(args[idx]);
    std::stringstream ss;
    ss << fp.GetFile() << "_" << size << ".png";
    std::cout << "Ploteando " << args[idx] << " a fichero en cache " << ss.str();
    std::vector<unsigned char> iofile;
    rcl::upair isize,osize;
    isize.x() = render.GetX();
    isize.y() = render.GetY();
    std::cout << "(" << isize.x() << "," << isize.y() << ")";
    if (isize.x()<isize.y()){
      osize.y()=size;
      osize.x()=size*isize.x();
      osize.x()=osize.x()/isize.y();
      }
    else{
      osize.x()=size;
      osize.y()=size*isize.y();
      osize.y()=osize.y()/isize.x();
      }
    std::cout << " con dimensiones " << osize.x() << " × " << osize.y();
    rcl::encode_png(iofile,render.resize_nn(osize.x(),osize.y()));
    std::cout << " ocupando " << iofile.size() << " bytes" << std::endl;
    cache.insert_data(ss.str(),iofile);
    }
  std::cout << "Escribiendo en cache..." << std::endl;
  cache.write_to_file(".thumbs.vfc");
  return 0;
}
static rcl::reg_app reg2("populate_cache",populate_cache_main);

int extract_cache_main(int argc,char **argv){
  std::vector<std::string> args(argv,argv+argc);
  if (argc<2){
    std::cout << argv[0] << " path/to/extract " << std::endl;
    return 1;
    }
  rcl::icacheromfs cache;
  std::cout << "Test [.thumbs.vfc] da f"<< rcl::check_file(".thumbs.vfc") <<"c" << rcl::is_crfs(".thumbs.vfc") << std::endl;
  cache.open_file(".thumbs.vfc");
  rcl::stringvector list = cache.get_filenames();
  std::cout << "Numero de archivos = " << list.size() << std::endl;
  for (int idx=0;idx<list.size();idx++){
    std::cout << list[idx] << std::endl;
    rcl::bytevector data;
    data = cache.read(list[idx]);
    rcl::save_file(args[1]+"/"+list[idx],data);
    }
  return 0;
  }
static rcl::reg_app reg3("extract_cache",vf_render_main);
  
namespace rcl{
rcl::image32 plot_vf_file(const std::string& filename){
  const unsigned char empty_icon[858]={
    0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
    0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x74,0x09,0x95,
    0xCB,0x00,0x00,0x03,0x21,0x49,0x44,0x41,0x54,0x78,0x01,0xD4,0xD0,0xB1,0xCD,0x2A,
    0x07,0x10,0x45,0xE1,0xC3,0x31,0x01,0x21,0x25,0xD0,0x89,0x29,0x6D,0xDD,0x89,0x4B,
    0xA1,0x14,0xC2,0x17,0x12,0x6E,0x80,0x59,0x4B,0xFF,0x58,0x5A,0x69,0x1F,0x33,0x37,
    0xF6,0xCD,0xAE,0x74,0xA2,0xCF,0x2D,0x4C,0xC2,0xFE,0x7F,0xC1,0x5F,0xA7,0x7D,0xD7,
    0x6F,0xC1,0xC2,0xBE,0x15,0x60,0x01,0x19,0xB6,0x3D,0x40,0xF6,0xCB,0x71,0x9F,0x27,
    0xC8,0x7E,0x39,0xEE,0xFD,0x02,0xD9,0x2F,0xC7,0xAD,0x2B,0xC8,0x7E,0x39,0xEE,0xF5,
    0x06,0xD9,0x2F,0xC7,0x3D,0x3F,0x20,0xFB,0xE5,0xB8,0xC7,0x06,0xB2,0x5F,0x8E,0x5B,
    0x58,0x90,0xFD,0xFE,0xC6,0x00,0x0F,0x9C,0x18,0xE0,0x89,0x13,0x03,0xBC,0x70,0x62,
    0x80,0x15,0x27,0x06,0x78,0xE3,0xC4,0x00,0x1F,0x9C,0x18,0x00,0x1C,0x19,0x10,0x47,
    0x06,0xCE,0x38,0x32,0x70,0xC1,0x91,0x81,0x2B,0x8E,0x0C,0xDC,0x70,0x64,0xE0,0x8E,
    0x23,0x03,0x0B,0x8E,0x0C,0x27,0x30,0x30,0x60,0x60,0xC0,0x8E,0xE1,0x52,0x0C,0xD8,
    0x31,0x5C,0x8B,0x01,0x3B,0x86,0x5B,0x31,0x60,0xC7,0x70,0x2F,0x06,0xEC,0x18,0x96,
    0x62,0xC0,0x86,0xE1,0x54,0x0C,0x60,0xC3,0x20,0x0B,0x08,0xD8,0x30,0x9C,0x8B,0x01,
    0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x06,
    0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,
    0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0xDF,0x19,0xEE,
    0xC5,0x00,0xF8,0x95,0x61,0x03,0xDC,0x83,0xDF,0x19,0x3E,0xC5,0xB0,0x3B,0xD4,0x76,
    0x86,0x77,0x31,0xEC,0x92,0x47,0x86,0xB5,0x18,0xDA,0xE0,0xF6,0x2A,0x86,0x36,0xB8,
    0x3F,0x8B,0xA1,0x0D,0x96,0x07,0xB0,0xF4,0xC1,0x89,0xA5,0x18,0xF6,0xA0,0x67,0x40,
    0x80,0x81,0x01,0x81,0x7F,0x4E,0xFF,0xED,0x0B,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,
    0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x1D,0x43,0x17,0x1C,0x19,0x30,0x30,0x60,0xC7,
    0xF0,0xAB,0x0F,0x8A,0xE1,0xD9,0x07,0xC5,0xF0,0x68,0x83,0x62,0x18,0xA0,0x8A,0x61,
    0xA3,0x0D,0x8A,0xE1,0xD3,0x07,0xC5,0xF0,0xEE,0x83,0x62,0x58,0xFB,0xA0,0x18,0x5E,
    0xD4,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x06,0x06,0x0C,0x0C,
    0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x06,0x06,0x0C,
    0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x06,0x06,
    0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x06,
    0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,
    0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,
    0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,
    0x03,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,
    0x01,0x03,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,
    0x81,0x01,0x03,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0xF6,0xE0,0x5E,0x16,0x7D,0xB0,
    0x3C,0x8B,0xA1,0x0B,0x4E,0x3C,0x8A,0xA1,0x0B,0x64,0x29,0x86,0x2E,0x38,0x6F,0xC5,
    0xD0,0x06,0x97,0x4F,0x31,0xB4,0xC1,0xF5,0x5D,0x0C,0x6D,0x70,0x5B,0x8B,0xA1,0x0D,
    0xEE,0xAF,0xEF,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,
    0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,
    0x03,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,
    0x01,0x03,0x43,0x05,0xB7,0x5F,0x2D,0x03,0x52,0x02,0x1D,0x03,0x52,0x02,0x1D,0x03,
    0x02,0x7F,0xB0,0xB4,0x0C,0x08,0xB0,0xD1,0x32,0x54,0xF0,0xE9,0x19,0x2A,0x78,0xF7,
    0x0C,0x15,0xAC,0x3D,0x43,0x05,0xAF,0x9E,0xA1,0x82,0x62,0x18,0x82,0x81,0x01,0x81,
    0x89,0x01,0x03,0x03,0x06,0x06,0x0C,0x0C,0x18,0x18,0x30,0x30,0x20,0x14,0xC3,0xDF,
    0x7D,0x50,0x0C,0x4B,0x1B,0x14,0xC3,0x46,0x1B,0x14,0xC3,0xA7,0x0F,0x8A,0xE1,0xDD,
    0x07,0xC5,0xB0,0xF6,0x41,0x31,0xBC,0xFA,0xA0,0x18,0x9E,0x7D,0x50,0x0C,0x8F,0x36,
    0x08,0x0C,0x18,0x18,0x30,0x30,0x60,0x60,0xC0,0xC0,0x80,0x81,0x01,0x03,0x03,0x16,
    0x03,0xBF,0xED,0x42,0xCD,0x62,0xF8,0x73,0x3B,0xEE,0x45,0xCD,0x1F,0x06,0xFA,0xB9,
    0x01,0x4E,0xC1,0x0F,0xC3,0x14,0xFC,0x30,0x4C,0xC1,0x0F,0xC3,0x14,0x00,0xDC,0xA6,
    0xE0,0x52,0x0C,0xED,0x3C,0x03,0xCB,0x14,0x38,0x33,0xE0,0x69,0x64,0x28,0xC9,0x89,
    0x01,0xB9,0x8F,0x0C,0xC8,0x6D,0x64,0x40,0xAE,0x23,0x03,0x72,0x19,0x19,0x90,0xF3,
    0xC8,0x80,0x38,0x32,0x20,0x27,0x43,0xC0,0xBF,0x6B,0x21,0xA4,0xC0,0x83,0x90,0x02,
    0x83,0x41,0xBF,0x30,0x00,0x00,0xD7,0x2B,0xF3,0xF0,0x4F,0x43,0xCA,0x50,0x00,0x00,
    0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82};
  const unsigned char lock_icon[637]={
    0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
    0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x03,0x00,0x00,0x00,0x66,0xBC,0x3A,
    0x25,0x00,0x00,0x00,0x06,0x50,0x4C,0x54,0x45,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x55,
    0xC2,0xD3,0x7E,0x00,0x00,0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0E,0xC4,0x00,
    0x00,0x0E,0xC4,0x01,0x95,0x2B,0x0E,0x1B,0x00,0x00,0x02,0x1D,0x49,0x44,0x41,0x54,
    0x68,0x81,0xED,0xD9,0xCB,0x71,0xC3,0x20,0x10,0x06,0x60,0x31,0x1C,0x38,0x52,0x02,
    0xA5,0x50,0x1A,0x2A,0x2D,0xA5,0xA8,0x04,0x1D,0x7D,0xF0,0x98,0xC4,0x0F,0xC1,0x22,
    0xFE,0x65,0x2D,0x39,0x76,0x1C,0x0F,0x9C,0x92,0xF0,0xC9,0xB0,0xBB,0x08,0x29,0x78,
    0x18,0xCA,0x16,0xE3,0xD0,0x6C,0x3E,0xC6,0x63,0xAB,0x5F,0xC7,0x9F,0xF6,0xD5,0x00,
    0xEE,0x0C,0x0E,0x0D,0x10,0x2F,0x4D,0x18,0xA1,0x35,0x86,0xBB,0x02,0x7E,0x8C,0x70,
    0x05,0x27,0xAE,0x5F,0xC5,0x5B,0x1B,0xDB,0x53,0xE0,0x27,0x61,0x17,0x30,0xB7,0xE7,
    0xC8,0xCF,0x32,0x2C,0x80,0x9B,0x65,0x4C,0x4D,0x08,0x82,0x0B,0xC3,0x64,0x30,0xB5,
    0x83,0xE0,0xC2,0x70,0x19,0xE0,0x30,0x7C,0x06,0x78,0xD1,0x84,0x0C,0x70,0x9C,0x91,
    0x34,0xD4,0xAF,0x28,0x18,0x01,0xB8,0x96,0x6A,0xB6,0x6C,0xB9,0xCC,0x6D,0x76,0x9E,
    0x4B,0x84,0xBD,0x5D,0xA9,0xB9,0x44,0xD8,0x65,0xF6,0x81,0x01,0x6E,0x49,0x50,0xFA,
    0x61,0xD5,0xFC,0x32,0xB4,0x61,0x32,0x15,0x96,0xE8,0x14,0x93,0xA9,0x90,0xF2,0xC3,
    0x80,0xFC,0xC1,0x1E,0xA6,0x52,0xE5,0xA9,0x39,0x98,0x4A,0x95,0x83,0xB3,0x10,0xE8,
    0x9C,0x3F,0x03,0x73,0xAD,0xF3,0x65,0x0A,0x02,0x43,0x66,0x06,0x8B,0x61,0x48,0x6C,
    0x01,0x01,0x5B,0x82,0xBA,0x18,0x96,0xE4,0xD7,0x23,0xE0,0x48,0x85,0x1C,0xAA,0x96,
    0x23,0x57,0x59,0x04,0x3C,0x99,0x98,0x41,0xE5,0x14,0x41,0x20,0xC9,0xD1,0xA8,0x9C,
    0x81,0xE4,0x5F,0xED,0x02,0xC5,0x1A,0x40,0x0B,0xE2,0x0E,0x40,0x3E,0x35,0xD4,0x40,
    0xAD,0xC1,0xB8,0x03,0x90,0xDC,0xF8,0x67,0x00,0x5D,0x14,0xD0,0xD5,0x8B,0xF2,0x57,
    0x00,0x59,0x65,0xF6,0x4F,0x80,0x59,0x83,0xE9,0x9F,0x82,0x89,0xFB,0xAD,0x83,0x0E,
    0x3A,0xE8,0xA0,0x09,0xC8,0xEB,0x28,0x7C,0x29,0xD5,0xEB,0xFE,0xF5,0x4E,0xEA,0x6A,
    0x50,0x3E,0xFF,0xAB,0x11,0xD6,0x63,0xD4,0xFD,0xE5,0x93,0x53,0x21,0x30,0xB6,0xE7,
    0x58,0xCE,0xD2,0x20,0x40,0x33,0x61,0x11,0xA0,0x2F,0x42,0x20,0xCA,0x32,0x4E,0x10,
    0x65,0x19,0xA7,0x08,0x02,0x02,0xA7,0x2D,0x00,0xF5,0x17,0xA9,0x7C,0x3E,0x80,0xB5,
    0xA2,0xD5,0x7A,0x0D,0xA8,0xDE,0x1F,0xFD,0x0A,0x54,0xAF,0xA8,0xAE,0x83,0x0E,0x3E,
    0x05,0xF8,0x63,0x1B,0xA8,0xF4,0x67,0x06,0xE4,0x07,0x05,0x03,0x6C,0xDA,0x1E,0x19,
    0xE0,0xD3,0x4D,0xC8,0x80,0x90,0xF6,0x2E,0x06,0xE4,0x8D,0x05,0x03,0x95,0xEF,0x7A,
    0x0C,0xC8,0xB1,0xDB,0x4E,0x70,0x79,0x6E,0x4C,0x0D,0x70,0x79,0x6E,0xCC,0x8F,0x00,
    0x77,0x06,0x87,0xA7,0x02,0x7F,0x06,0xC7,0x0E,0xDE,0x01,0xBC,0xA0,0xDC,0x8F,0xAF,
    0x49,0x71,0xD9,0x3F,0x7E,0x67,0x89,0x37,0xAF,0x78,0xFB,0xCB,0x1B,0x88,0xB8,0x05,
    0x89,0x9B,0x98,0xB8,0x0D,0x76,0xD0,0xC1,0x26,0xA0,0xD3,0x3F,0x26,0x7B,0x81,0xF8,
    0xEC,0xCE,0x5F,0x57,0xED,0x06,0xD2,0xFB,0xC3,0x60,0x67,0x01,0xA4,0xD6,0x41,0x07,
    0x9F,0x0F,0x50,0x7B,0x2F,0xF0,0x8A,0xC3,0x81,0x80,0xFA,0x37,0x9D,0x60,0x78,0x04,
    0x36,0x9D,0xA2,0x38,0x04,0x68,0xFD,0xC4,0xA3,0x1E,0x83,0xC0,0x44,0x80,0x78,0xDC,
    0x24,0x1E,0x58,0x89,0x47,0x5E,0x28,0x53,0xE5,0x17,0x56,0x20,0xCE,0x72,0x95,0x82,
    0x30,0xA6,0x02,0xD4,0x63,0x2C,0x23,0x7C,0x03,0x3E,0x70,0xAC,0x33,0x55,0x8D,0x4F,
    0x7D,0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82};
  rcl::image32 ans;
  if (rcl::check_file(filename)){
    if (rcl::is_lock(filename)){
      rcl::decode_png(ans,std::vector<unsigned char>(lock_icon,lock_icon+637));
      }
    else{
      rcl::ffield vdata;
      rcl::load_vecfile(vdata,filename);
      rcl::normpeak(vdata);
      ans = rcl::display_field(vdata,0,"");
    }
  }
  else{
    rcl::decode_png(ans,std::vector<unsigned char>(empty_icon,empty_icon+858));
  }
  return ans;
}
  
}
//const unsigned char lock_icon[304]={0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0xEB,0x45,0x5C,0x66,0x00,0x00,0x00,0xF7,0x49,0x44,0x41,0x54,0x78,0x01,0xED,0xD4,0x09,0x8A,0xC4,0x20,0x10,0x05,0xD0,0x2F,0x02,0xB2,0x7B,0x04,0x8F,0xE2,0xD1,0xF4,0x68,0x39,0x8A,0x47,0x90,0x5D,0x40,0xEC,0xA1,0xA2,0xB1,0x2A,0x21,0x0B,0x0C,0x43,0x33,0x0D,0xFD,0x81,0x4F,0x78,0x82,0x64,0x31,0x85,0x57,0xCF,0xA2,0xC7,0xC5,0x80,0x0A,0xF8,0x1D,0x24,0xC0,0xEC,0x20,0x02,0x4A,0x42,0x03,0x80,0x20,0xA0,0x12,0x78,0x01,0x99,0xC0,0x0A,0x48,0x04,0x46,0xC0,0x42,0xA0,0x05,0x44,0x02,0x25,0x00,0x6B,0x18,0x1A,0x60,0x33,0x10,0x26,0x54,0x5A,0x05,0xFC,0x84,0x02,0x4D,0x1B,0xBB,0x09,0x19,0xB6,0xD7,0x04,0x5A,0x2C,0x02,0x12,0x3C,0x6D,0x64,0x04,0x50,0x0B,0x58,0x14,0x75,0xD4,0xD7,0x10,0x75,0x67,0x06,0x43,0x9D,0x18,0xD0,0x01,0x0C,0x96,0x3A,0xDF,0x81,0xA3,0x2E,0x13,0xDA,0x06,0xE1,0x1A,0x3C,0x41,0xFD,0xC2,0x3B,0x21,0x63,0xC4,0x0E,0x88,0x1B,0xA8,0x01,0x98,0xE9,0xD0,0x18,0xC2,0x0A,0x95,0xC1,0xAF,0x50,0x18,0xDC,0x39,0x64,0x06,0xFB,0x5B,0xE8,0xE7,0xB3,0x9F,0xD7,0x4F,0x84,0xEA,0x0F,0x90,0xCC,0x01,0xA2,0x3A,0x00,0xB0,0x87,0x06,0x84,0x7B,0xA8,0x80,0xBF,0x87,0x02,0xB8,0xB7,0xC3,0xF3,0x8D,0x3D,0x3F,0x1C,0xBF,0x0F,0x86,0x45,0xFF,0x53,0x48,0xE6,0x09,0xB2,0x3D,0x40,0x71,0xF7,0x07,0x86,0xF2,0x89,0x20,0x7F,0xE4,0xBF,0x80,0xF3,0x09,0x53,0x19,0xFC,0xF9,0xD8,0x7A,0x31,0x5C,0x8D,0xBE,0xB4,0x01,0x7D,0xAC,0x1F,0x05,0x3E,0x90,0x2C,0x1E,0x37,0xC2,0x5E,0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82}; 

